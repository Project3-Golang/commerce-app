openapi: 3.0.0
info:
  description: Ecommerce with Golang and React JS
  version: "1.0.0"
  title: EStore
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Team4 (Fantastic Four)
    email: Fantastic4@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/pr3ecommerse/EStoreProject/1.0.0
  - url: 'https://golangproject.site'
tags:
  - name: Auth
    description: Layanan untuk authentikasi User
  - name: Users
    description: Layanan yang mengorganisir data User
  - name: Products
    description: Layanan yang mengorganisir data Product
  - name: Orders
    description: Layanan yang mengorganisir data Order
  - name: Carts
    description: Layanan yang mengorganisir data Cart  
  - name: Payments
    description: Layanan yang mengorganisir data Payment


paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login User
      description: You can access this fitur after Registration
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  email: "thanos@gmail.com",
                  password: "madtitan123"
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "seethebat@gmail.com",
                  password: "waynee123"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLoginSuccess'
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "Login Success",
                    code : 200,
                    data: {
                      "user_id": 1,
                      "user_name": "batman",
                      "email" : "seethebat@gmail.com",
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co",
                    role : "admin",
                    }
                  }
                responseData2:
                  description: response success 2,
                  value: {
                    "message": "Login Success",
                    "code" : 200,
                    "data": {
                      user_id: 2,
                      user_name: "thanos",
                      token: "AyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co",
                      role: "user",
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    "code" : 400,
                    "message": "email or password incorrect",
                    "data": null
                  }
        '500':
          description: Internal server Error
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    "code" : 500,
                    "message": "Internal server Error",
                    "data": null
                  }
  /users:
    get:
      tags:
        - Users
      summary: Get User data
      description: Get User data for user profile
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: "user"
          description: username
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetUserSuccess'
              examples:
                responseData1:
                  description: response success
                  value: {        
                    message: "success",
                    code : 200,
                    data: {
                      "id": 1,
                      "username": "antoniobanderas",
                      "email": "antoniobanderas@gmail.com",
                      "alamat": "Jln. Baru Bangun No.7, Jakarta - Indonesia",
                      "notelp": "081223455432",
                      "created_at": "2022-07-22T05:56:50.248Z",
                      "image_url": "server/antonio.jpg",
                      "role":"user"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "Bad Request",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal Server error
          content:
            application/json:
              examples:
                responseData1:
                  description: Internal Server error
                  value: {
                    message: "Internal Server error",
                    code : 500,
                    data : null
                  }
    post:
      tags:
        - Users
      summary: User Registration
      description: User Registration before Login
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestRegistrasi'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  username: "thanos",
                  email: "thanos@gmail.com",
                  password: "madtitan123",
                  fullname: "The Mad Titan Thanos",
                  photo: "thanos.jpg"
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "batman",
                  email: "seethebat@gmail.com",
                  password: "waynee123",
                  fullname: "Not Bruce Wayne",
                  photo: "batman.jpg"
                }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success to insert data",
                    code : 200,
                    token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "all input data must be filled",
                    code : 400,
                  }
        '500':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: Internal Server Error
                  value: {
                    message: "Internal Server Error",
                    code : 500,
                  }
    put:
      tags:
        - Users
      summary: Update User Data
      description: Update user data by id 
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            example: 1
          description: iduser
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdate'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                  username: "antoniobanderas",
                  email: "antoniobanderas@gmail.com",
                  password: "An43ddz",
                  alamat: "Jln. Baru Bangun No.7, Jakarta - Indonesia",
                  notelp: "081223455432",
                  file: "antonio.jpg"
                }
              userData2:
                description: "Example data  user 2"
                value: {
                  username: "AntonyStarr",
                  email: "homelander@gmail.com",
                  password: "Homelander666",
                  alamat: "Jln. Lama No.5, Jakarta - Indonesia",
                  notelp: "081278901234",
                  file: "starr.jpg"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success to insert data",
                    code : 200,
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "failed to update data",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal server Error
          content:
            application/json:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "Internal server Error",
                    code : 500,
                    data : null
                  }
    delete:
      tags:
        - Users
      summary: Delete User
      description: Delete certain user by id
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success to delete",
                    code : 200,
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Bad Request",
                    code : 400,
                    data : null
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Bad Request",
                    code : 500,
                    data : null
                  }
  /products:
    get:
      tags:
        - Products
      summary: Get All Product
      description: Get All Product from database
      responses:
        '200':
          description: Success Response get all Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseAllProductsuccess'
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success",
                    data: [{
                      id: 1,
                      nama: "Sepatu keren",
                      price: 100000,
                      stock: 99,
                      created_at: "2022-07-26T18:35:01.231Z",
                      "image_url": "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      },
                      comment: [{"1":"wah keren..."},{"2":"menarik nih"}]
                    }]
                  }
        '400':
          description: Cannot get all Product
          content:
            application/json:
              examples:
                responseData1:
                  description: failed to get all data
                  value: {
                    "message" : "failed to get all data",
                    "code":400
                  }
        '500':
          description: Internal Server Error
          content:
            application/json:
              examples:
                responseData1:
                  description: Internal Server Error
                  value: {
                    "message" : "Internal Server Error",
                    "code":500
                  }
    post:
      tags:
        - Products
      summary: Add new Product data
      description: Add new data to database
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestProduct'
                examples:
                  productData1:
                    description: "Example Product input"
                    value: {
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success to insert Product",
                    code : 200,
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "all input data must be filled",
                    code : 400,
                  }
        '500':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Internal Server Error",
                    code : 500,
                  }
    put:
      tags:
        - Products
      summary: Update Product data
      description: Update Product by id
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: id_product
          required: true
          schema:
            type: number
            example: 1
          description: ID Product
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdateProduct'
            examples:
              userData1:
                description: "Example data  user 1"
                value: {
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success update data",
                    code : 200,
                    data : null
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "Bad Request",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "Internal server error",
                    code : 500,
                    data : null
                  }   
    delete:
      tags:
        - Products
      summary: Delete Products data
      description: Delete Products by id
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: idproducts
          required: true
          schema:
            type: number
            example: 1
          description: id_products
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response success 1
                  value: {
                    message: "success delete data",
                    code : 200
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed 1
                  value: {
                    message: "Bad Request",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                responseData1:
                  description: Internal server error
                  value: {
                    message: "Internal server error",
                    code : 500,
                    data : null
                  }           
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get Product by id
      description: Get Product by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            example: 1
          description: id Product
      responses:
        '200':
          description: Success Response get a Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseProductsuccess'
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success",
                    code : 200,
                    data: {
                      id: 1,
                        content: "Hello guys... hari ini pada liburan kemana?? cek this out",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      },
                      comment: [
                        {id: 2, content: "Pantai guys",  created_at: "2022-07-26T22:35:01.231Z"},
                        {id: 4, content: "Awasome...",  created_at: "2022-07-26T22:45:01.231Z"},
                      ]
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "Bad Request",
                    code : 400,
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: Failed Response
                  value: {
                    message: "Internal Server Error",
                    code : 500,
                  }
    
    
  /orders:
    get:
      tags:
        - Orders
      summary : Get Orders
      description: Get All Orders
      responses:
        '200':
          description: Success Response get all Orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseOrderSuccess'
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success",
                    code : 200,
                    data: [{
                      id: 1,
                      content: "Biasa... ke Pantai",
                      created_at: "2022-07-26T18:35:01.231Z",
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    },
                    {
                      id: 4,
                      content: "Here we go...",
                      created_at: "2022-07-26T18:35:01.231Z",
                      user: {
                        id: 3,
                        user_name: "Bucher"
                      }
                    }
                    ]
                  }
        '400':
          description: Cannot get all Orders
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    "message" : "failed to get all data",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal Server Error
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    "message" : "Internal Server Error",
                    code : 500,
                    data : null
                  }
    post:
      tags:
        - Orders
      summary : Add new Orders
      description: Add new Orders
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestOrders'
                examples:
                  newsData1:
                    description: "Example Orders"
                    value: {
                        content: "Kepantai seru...",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success to insert Orders",
                    code : 200,
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "all input data must be filled",
                    code : 400,
                    data : null
                  }
        '500':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Internal Server Error",
                    code : 500,
                    data : null
                  }
    delete:
      tags:
        - Orders
      summary : Delete Order
      description: Delete Order by id
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestOrders'
                examples:
                  newsData1:
                    description: "Example Orders"
                    value: {
                        content: "Kepantai seru...",
                        created_at: "2022-07-26T18:35:01.231Z",
                        image_url: "image/im.jpg",
                        deleted_at: "2022-07-26T18:35:01.231Z",
                        user_id: 2,
                        }
      responses:
        '200':
          description: Success Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "Delete Success",
                    code : 200,
                  }
        '400':
          description: Failed Response
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Delete Orders Error",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal Server Error
          content:
            multipart/form-data:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Internal Server Error",
                    code : 500,
                    data : null
                  }
  /orders/{id}:
    get:
      tags:
      - Orders
      summary : Get Order
      description: Get Order by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
            example: 1
          description: id Order
      responses:
        '200':
          description: Success Response get a Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseOrderSuccess'
              examples:
                responseData1:
                  description: response success
                  value: {
                    message: "success",
                    code : 200,
                    data: [{
                      orders:
                      [
                      {
                        id: 1,
                        content: "Biasa... ke Pantai",
                        created_at: "2022-07-26T18:35:01.231Z"},{
                        id: 2,
                        content: "waduuuhh...",
                        created_at: "2022-07-26T18:45:01.231Z"},{
                        id: 3,
                        content: "waduuuhh...",
                        created_at: "2022-07-26T18:45:01.231Z"
                        }
                      ],
                      user: {
                        id: 2,
                        user_name: "AntonyStarr"
                      }
                    }
                    
                    ]
                  }
                    
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Bad Request",
                    code : 400,
                    data : null
                  }
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                responseData1:
                  description: response failed
                  value: {
                    message: "Internal server error",
                    code : 500,
                    data : null
                  }
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  schemas:
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1

    responseLoginSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    requestRegistrasi:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "fullname":
          type: string
          minLength: 1
        "file":
          type: string
          minLength: 1
          
    responseRegistrasiSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    responseGetUserSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    requestUpdate:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
        "password":
          type: string
          minLength: 1
        "email":
          type: string
          minLength: 1
        "fullname":
          type: string
          minLength: 1
        "file":
          type: string
          minLength: 1

    requestProducts:
      type: object
      properties:
        "content":
          type: string
          minLength: 1
        "file_images":
          type: string
          minLength: 1
        "file_attachment":
          type: string
          minLength: 1     
        "user_id":
          type: number
          minLength: 1

    responseAllProductsuccess:
      type: object
      properties: {
        "message": {
          type: string
          },
          "data":{
            type: object
          }
      }

    responseProductsuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }

    requestUpdateProducts:
      type: object
      properties:
        "content":
          type: string
          minLength: 1
        "file_images":
          type: string
          minLength: 1
        "file_attachment":
          type: string
          minLength: 1     
        "user_id":
          type: number
          minLength: 1
        "sold":
          type: number

    requestOrders:
      type: object
      properties:
        "content":
          type: number
          minLength: 1
        "user_id":
          type: number
          minLength: 1
        "news_id":
          type: number
          minLength: 1

    responseOrdersSuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }