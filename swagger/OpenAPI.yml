openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/pr3ecommerse/EStoreProject/1.0.0
  - url: https://golangproject.site
    description: consume api link
info:
  description: E-Store with Golang and React
  version: "1.0.0"
  title: E-STORE
  contact:
    email: team4@store.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

paths:
  /login:
    post:
      tags:
        - Auth
      summary: login user
      description: Login user bisa digunakan ketika user sudah registrasi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestLogin'
            examples:
              userData1:
                description: "Data  user 1"
                value: {
                  email: "thanos@gmail.com",
                  password: "than321",
                  role: "admin"
                }
              userData2:
                description: "Data  user 2"
                value: {
                  email: "badman@gmail.com",
                  password: "Cahyo12",
                  role: "user"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseLoginSuccess'
              examples:
                responseData:
                  description: response success to login to your account
                  value: {
                    code: 200,
                    message: "Login Success",
                    data: {
                      "user_id": 1,
                      "username": "madtitan",
                      "role": "admin",
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
                responseData2:
                  description: response success to login your account
                  value: {
                    code: 200,
                    message: "Login Success",
                    data: {
                      "user_id": 2,
                      "username": "batman",
                      "role": "user",
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2MzgzMjYxODAsInVzZXJJZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.AebFR-oQjUSOMez2ucDWkiMrS2eQIPmcYm5c71qZ_co"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed to login to account
                  value: {
                    code: 400,
                    message: "email or password incorrect"
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed to login to account
                  value: {
                    code: 500,
                    message: "Internal server error"
                  }
        
  /users:
    post:
      tags:
        - Users
      summary: Registration User
      description: Saat registrasi user harus input semua field
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestRegistrasi'
            examples:
              userData1:
                description: "Data  user 1"
                value: {
                  fullname: "thanos ",
                  username: "madtitan",
                  email: "thanos@gmail.com",
                  password: "than321",
                  alamat: "Jln. Baru No.4, Jakarta - Indonesia",
                  phone: "8128188181818",
                  role: "admin",
                  file: "profile1.jpg"
                }
              userData2:
                description: "Data  user 2"
                value: {
                  fullname: "batman boy",
                  username: "batman",
                  email: "notbatman@gmail.com",
                  password: "wayne1234",
                  alamat: "Jln. Lama No.5, Jakarta - Indonesia",
                  phone: "8128188181818",
                  role: "user",
                  file: "profile2.jpg"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success to register user
                  value: {
                    code: 200,
                    message: "success to insert data",
                  }
                
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed to register user
                  value: {
                    code: 400,
                    message: "all input data must be filled",
                    data : null
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed to register user
                  value: {
                    code: 500,
                    message: "Internal Server Error",
                    data : null
                  }
                
  /users/{iduser}:
    get:
      tags:
        - Users
      summary: for get User By Id
      description: Bisa diaplikasikan ketika user ingin melihat profilnya
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGetUserSuccess'
              examples:
                responseData:
                  value: {
                    code: 200,
                    message: "success",
                    data: {
                      "id"     : 1,
                      "fullname": "The Mad Titan",
                      "username": "thanos",
                      "email": "thanos@gmail.com",
                      "address": "Jln. Baru No.4, Jakarta - Indonesia",
                      "phone": "08123247689",
                      "role" : "admin",
                      "created_at": "2022-06-27T05:56:50.248Z",
                      "photo_url": "https://storage.googleapis.com/bucket-project-2/profil1.jpg"
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 400,
                    message: "Bad Request",
                    data : null,
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 500,
                    message: "Internal Server Error",
                    data : null,
                  }
              
    put:
      tags:
        - Users
      summary: for put User By Id
      description: Bisa diaplikasikan ketika user ingin update profilnya & semua field tidak boleh kosong
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdate'
            examples:
              userData1:
                description: "Data  user 1"
                value: {
                  "id"     : 1,
                  "fullname": "The Mad Titan",
                  "username": "thanos",
                  "email": "thanos@gmail.com",
                  "address": "Jln. Baru No.4, Jakarta - Indonesia",
                  "phone": "08123247689",
                  "role" : "admin",
                  "created_at": "2022-06-27T05:56:50.248Z",
                  "photo_url": "https://storage.googleapis.com/bucket/profil1.jpg"
                }
              userData2:
                description: "Data  user 2"
                value: {
                  "id"     : 2,
                  "fullname": "Bruce Wayne",
                  "username": "batman",
                  "email": "notbatman@gmail.com",
                  "address": "Jln. Baru No.4, Jakarta - Indonesia",
                  "phone": "08123247689",
                  "role" : "user",
                  "created_at": "2022-06-27T05:56:50.248Z",
                  "photo_url": "https://storage.googleapis.com/bucket/profil3.jpg"
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success
                  value: {
                    code: 200,
                    message: "success to insert data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 400,
                    message: "Failed to update data",
                    data : null,
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 500,
                    message: "Internal Server Error",
                    data : null,
                  }

    delete:
      tags:
        - Users
      summary: for delete User By Id
      description: Bisa diaplikasikan ketika user ingin melihat profilnya
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success
                  value: {
                    code: 200,
                    message: "success to delete",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 400,
                    message: "Failed to delete data",
                    data : null,
                  }
        '500':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: Failed Response
                  value: {
                    code: 500,
                    message: "Internal Server Error",
                    data : null,
                  }
  /products:
    get:
      tags:
        - products
      description: Get All product
      responses:
        '200':
          description: Success Response get all product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseAllproductSuccess'
              examples:
                responseData:
                  description: response success 
                  value: {
                    message: "success",
                    data: [{
                      id: 1,
                      name: "sepatu",
                      price: 150000,
                      quantity: 3,
                      description: "terlaris pada tahun ini",
                      image_url : "https://storage.googleapis.com/bucket/download1.jpg",
                      sold: 0,
                      created_at: "2022-06-26T18:35:01.231Z"
                    }]
                  }
        '400':
          description: Cannot get all product
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    "code" : 400,
                    "message" : "Cannot get all product",
                    "data" : null
                  }
        '500':
          description: Cannot get all product
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    "code" : 500,
                    "message" : "Internal server error",
                    "data" : null
                  }
    post:
      tags:
        - products
      description: Add new product
      security:
        - JWTAuth: []
      requestBody:
            content:
              multipart/form-data:
                schema:
                  $ref: '#/components/schemas/requestproduct'
                examples:
                  productData1:
                    description: "Example product input"
                    value: {
                      id: 1,
                      name: "sepatu",
                      price: 150000,
                      stock: 300,
                      description: "terlaris pada tahun ini",
                      image_url : "https://storage.googleapis.com/bucket-project-2/download1.jpg",
                      sold: 0,
                      created_at: "2022-06-26T18:35:01.231Z",
                        }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    code: 200,
                    message: "success to insert product",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "all input data must be filled",
                  }

  /products/{idproduct}:
    get:
      tags:
        - products
      description: Get product by idproduct
      parameters:
        - in: path
          name: idproduct
          required: true
          schema:
            type: number
            example: 1
          description: id product
      responses:
        '200':
          description: Success Response get a product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseproductSuccess'
              examples:
                responseData:
                  description: response success 
                  value: {
                    message: "success",
                    data: {
                      id: 1,
                      name: "sepatuBatu",
                      price: 150000,
                      quantity: 3,
                      description: "terlaris pada tahun 2010",
                      image_url : "https://storage.googleapis.com/bucket-project-2/download1.jpg",
                      sold: 0,
                      created_at: "2022-06-26T18:35:01.231Z",
                      user: {
                        id: 2,
                        username: "tonystar"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
    put:
      tags:
        - products
      description: Update product by id product
      security:
        - JWTAuth: []     
      parameters:
        - in: path
          name: idproduct
          required: true
          schema:
            type: number
            example: 1
          description: product_id
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/requestUpdateproduct'
            examples:
              userData1:
                description: "Data Poduct"
                value: {
                        Name: "Sepatu",
                        price: 150000,
                        stock: 3,
                        description: "best shoes",
                        image_url: "https://storage.googleapis.com/download2.jpg",
                        user_id: 2,
                        sold: 0
                        }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    code: 200,
                    message: "success update data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
  
    delete:
      tags:
        - products
      description: Delete product by id product
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: idproduct
          required: true
          schema:
            type: number
            example: 1
          description: id_product
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    code: 200,
                    message: "success delete data",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }
                
  /carts/{idproduct}:
    post:
      tags:
        - Shoppingcarts
      description: Add to cart
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: idproduct
          required: true
          schema:
            type: number
            example: 1
          description: id_product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestShoppingCart'
            examples:
              shoppingCart1:
                description: "Example cart input"
                value: {
                    quantity: 1,
                    price: 150000,
                }
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    id_cart: 1,
                    code: 200,
                    message: "success insert to cart",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "failed insert to cart",
                  }
  /orders:
    put:
      tags:
        - Shoppingcarts
      description: Update status cart(to pay cart)
      security:
        - JWTAuth: []
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              examples:
                responseData:
                  description: response success 
                  value: {
                    code: 200,
                    message: "success updated status",
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "failed to update status",
                  }
  /orders/{iduser}:
    get:
      tags:
        - Shoppingcarts
      description: Get checkout
      security:
        - JWTAuth: []
      parameters:
        - in: path
          name: iduser
          required: true
          schema:
            type: number
            example: 1
          description: user_id
      responses:
        '200':
          description: Success Response 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseCartSuccess'
              examples:
                responseData:
                  description: response success 
                  value: {

                    code: 200,
                    message: "success",
                    data: {
                      id: 1,
                      total_quantity: 1,
                      total_price: 150000,
                      status: "Done",
                      user: {
                        id: 1,
                        username: "uti"
                      }
                    }
                  }
        '400':
          description: Failed Response
          content:
            application/json:
              examples:
                responseData:
                  description: response failed 
                  value: {
                    code: 400,
                    message: "Bad Request",
                  }

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  schemas:
    requestLogin:
      type: object
      properties:
        "email":
          type: string
          minLength: 1
          maxLength: 50
        "password":
          type: string
          minLength: 1
          maxLength: 50
        "role":
          type: string
          minLength: 1
          maxLength: 50
    responseLoginSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }
    
    requestRegistrasi:
      type: object
      properties:
        "username":
          type: string
          minLength: 1
          maxLength: 50
        "fullname":
          type: string
          minLength: 1
          maxLength: 50
        "password": 
          type: string
          minLength: 1
          maxLength: 50
        "email":
          type: string
          minLength: 1
          maxLength: 50
        "address":
          type: string
          minLength: 1
          maxLength: 100
        "phone":
          type: string
          minLength: 1
          maxLength: 15
        "role":
          type: string
          minLength: 1
          maxLength: 15
        "file":
          type: string
          minLength: 1
          maxLength: 100

    responseGetUserSuccess:
      type: object
      properties: {
        
        "message": {
          type: string
        },
        "data":{
          type: object
        }
      }

    requestUpdate:
      type: object
      properties:
        "username":
          type: string
          minLength: 5
          maxLength: 15
        "password":
          type: string
          minLength: 8
          maxLength: 15
        "email":
          type: string
          minLength: 1
          maxLength: 15
        "address":
          type: string
          minLength: 1
          maxLength: 50
        "phone":
          type: string
          minLength: 1
          maxLength: 15
        "role":
          type: string
          minLength: 10
          maxLength: 15
        "file":
          type: string
          minLength: 1
          maxLength: 50

    requestproduct:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
          maxLength: 50
        "price":
          type: number
          minLength: 1
          maxLength: 50
        "quantity":
          type: number
          minLength: 1
          maxLength: 50
        "description":
          type: string
          minLength: 1
          maxLength: 50
        "file":
          type: string
          minLength: 1
          maxLength: 50
        "user_id":
          type: number
          minLength: 1
          maxLength: 50
        "sold":
          type: number
          minLength: 1
          maxLength: 6

    responseAllproductSuccess:
      type: object
      properties: {

        "message": {
          type: string
          },
          "data":{
            type: object
          }
      }

    responseproductSuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }

    requestUpdateproduct:
      type: object
      properties:
        "name":
          type: string
          minLength: 1
          maxLength: 50
        "price":
          type: number
          minLength: 1
          maxLength: 6
        "quantity":
          type: number
          minLength: 1
          maxLength: 6
        "description":
          type: string
          minLength: 1
          maxLength: 50
        "file":
          type: string
          minLength: 1
          maxLength: 50
        "user_id":
          type: number
          minLength: 1
          maxLength: 50
        "sold":
          type: number
          minLength: 1
          maxLength: 6
    requestShoppingCart:
      type: object
      properties:
        "quantity":
          type: number
          minLength: 1
          maxLength: 6
        "price":
          type: number
          minLength: 1
          maxLength: 6
    responseCartSuccess:
      type: object
      properties: {
      
        "message": {
          type: string
          },
          "data":{
            type: object
            }
      }