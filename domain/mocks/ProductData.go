// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "commerce-app/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductData is an autogenerated mock type for the ProductData type
type ProductData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: IDProduct
func (_m *ProductData) Delete(IDProduct int) bool {
	ret := _m.Called(IDProduct)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDProduct)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ProductData) GetAll() []domain.Product {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	return r0
}

// GetProductID provides a mock function with given fields: productID
func (_m *ProductData) GetProductID(productID int) []domain.Product {
	ret := _m.Called(productID)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(int) []domain.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: insertProduct
func (_m *ProductData) Insert(insertProduct domain.Product) domain.Product {
	ret := _m.Called(insertProduct)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) domain.Product); ok {
		r0 = rf(insertProduct)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}

// Update provides a mock function with given fields: IDProduct, updatedProduct
func (_m *ProductData) Update(IDProduct int, updatedProduct domain.Product) domain.Product {
	ret := _m.Called(IDProduct, updatedProduct)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(int, domain.Product) domain.Product); ok {
		r0 = rf(IDProduct, updatedProduct)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	return r0
}

type mockConstructorTestingTNewProductData interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductData creates a new instance of ProductData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductData(t mockConstructorTestingTNewProductData) *ProductData {
	mock := &ProductData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
