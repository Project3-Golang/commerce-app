// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "commerce-app/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductUseCase is an autogenerated mock type for the ProductUseCase type
type ProductUseCase struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: newProduct
func (_m *ProductUseCase) AddProduct(newProduct domain.Product) (domain.Product, error) {
	ret := _m.Called(newProduct)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(domain.Product) domain.Product); ok {
		r0 = rf(newProduct)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Product) error); ok {
		r1 = rf(newProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelProduct provides a mock function with given fields: IDProduct
func (_m *ProductUseCase) DelProduct(IDProduct int) (bool, error) {
	ret := _m.Called(IDProduct)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(IDProduct)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(IDProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllP provides a mock function with given fields:
func (_m *ProductUseCase) GetAllP() ([]domain.Product, error) {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpecificProduct provides a mock function with given fields: productID
func (_m *ProductUseCase) GetSpecificProduct(productID int) ([]domain.Product, error) {
	ret := _m.Called(productID)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(int) []domain.Product); ok {
		r0 = rf(productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpProduct provides a mock function with given fields: IDProduct, updateData
func (_m *ProductUseCase) UpProduct(IDProduct int, updateData domain.Product) (domain.Product, error) {
	ret := _m.Called(IDProduct, updateData)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(int, domain.Product) domain.Product); ok {
		r0 = rf(IDProduct, updateData)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Product) error); ok {
		r1 = rf(IDProduct, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductUseCase creates a new instance of ProductUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductUseCase(t mockConstructorTestingTNewProductUseCase) *ProductUseCase {
	mock := &ProductUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
